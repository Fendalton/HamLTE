#! /usr/bin/env python3
from cffi import FFI
import re, sys, time
from random import random, randint
import itertools

print("""\
Usage: rlc_back_to_back_test <./rlc_implementation.so> [<protocol parameters> ...]
rlc.h implementation test
Connects two RLC implementations back-to-back, sending three
byte "Hei" messages" constantly. It reports all rlc.h callback calls.
The implementation must be a dlopenable shared library object which
defines all symbols mentioned in rlc.h.
""")

####################################################################

c_modules = []
ffi = FFI()

def load_c_module(header, libso):
  global c_modules
  L = []
  # Preprocess to remove most symbols
  import subprocess
  proc = subprocess.Popen(["gcc", "-E", "-DCFFI_PARSE", "-"], stdin=open(header), stdout=subprocess.PIPE)
  for line in proc.stdout.readlines():
    line = line.decode("UTF-8")
    if re.match(r"#|extern|}", line):
      continue
    L.append(line)

  ffi.cdef("".join(L))

  c = ffi.dlopen(libso)
  c_modules.append(c) # Stash it so it doesn't get lost
  for name in dir(c):
    globals()[name] = getattr(c, name)

load_c_module("rlc.h", sys.argv[1])

####################################################################

def envz(*args, **KWargs):
  L = list(args)
  L += ["%s=%s" % kv for kv in KWargs.items()]
  L.append("")
  return "\0".join(L).encode("UTF-8")

####################################################################
def arg_to_name(arg):
  global rlc1
  return ["RLC1", "RLC2"][arg == rlc2]

running_numbers = [0,0]

@ffi.callback("rlc_sdu_send_opportunity_fn")
def sdu_send_opportunity(arg, ms, buf, size):
  buf = ffi.buffer(buf, size)
  num = running_numbers[arg == rlc2]
  running_numbers[arg == rlc2] += 1
  pdu = "Hei" + str(num)
  pdu = pdu.encode("UTF-8")
  if arg == rlc2:
    pdu = b""
    print("        %s<-: Requested SDU (max %d bytes): %s" % (arg_to_name(arg), size, pdu))
    return -1
  else:
    print("->%s          : Requested SDU (max %d bytes): %s" % (arg_to_name(arg), size, pdu))
  buf[0:len(pdu)] = pdu
  return len(pdu)

@ffi.callback("rlc_sdu_received_fn")
def sdu_received(arg, ms, buf, size):
  buf = ffi.buffer(buf, size)[:]
  if arg == rlc1:
    print("<-%s        : Output SDU: %s" % (arg_to_name(arg), buf.decode("latin1"),))
  else:
    print("        %s->: Output SDU: %s" % (arg_to_name(arg), buf.decode("latin1"),))

@ffi.callback("rlc_sdu_delivered_fn")
def sdu_delivered(arg, ms, buf, size):
  buf = ffi.buffer(buf, size)[:]
  if arg == rlc1:
    print("**%s        : ACK: %s" % (arg_to_name(arg), buf.decode("latin1"),))
  else:
    print("        %s**: ACK: %s" % (arg_to_name(arg), buf.decode("latin1"),))


@ffi.callback("rlc_radio_link_failure_fn")
def sdu_rlf(arg, ms):
  if arg == rlc1:
    print("<-%sXX      : Radio link failure" % (arg_to_name(arg), buf.decode("latin1"),))
  else:
    print("      XX%s->: Radio link failure" % (arg_to_name(arg), buf.decode("latin1"),))


####################################################################

parameters = envz(*sys.argv[2:], a=3)

packet_loss_probability = .5

rlc1, rlc2 = rlc_init(), rlc_init()
rlc_am_set_callbacks(rlc1, rlc1, sdu_send_opportunity, sdu_received, sdu_delivered, sdu_rlf)
rlc_am_set_callbacks(rlc2, rlc2, sdu_send_opportunity, sdu_received, sdu_delivered, sdu_rlf)

if rlc_set_parameters(rlc1, parameters, len(parameters)):
  print("Setting parameters failed. Exiting.")
  sys.exit(1)
rlc_set_parameters(rlc2, parameters, len(parameters))

buf = ffi.new("char[16]")
for ms in itertools.count(step=1):
  rlc_timer_tick(rlc1, ms)
  so_size = randint(2, len(buf))
  got = rlc_pdu_send_opportunity(rlc1, ms, buf, so_size)
  pdu = ffi.buffer(buf, max(got, 0))[:]
  if got != -1:
    print("  RLC1->      : PDU %d/%d bytes: %r" % (got, so_size, pdu.decode("latin1")))
    if random() >= packet_loss_probability:
      rlc_pdu_received(rlc2, ms, buf, got)
    else:
      print("    ......    : Simulating PDU loss ")
  else:
    print("  RLC1        : PDU %d/%d bytes: %r" % (got, so_size, pdu.decode("latin1")))

  time.sleep(.250)

  rlc_timer_tick(rlc2, ms)
  so_size = len(buf)
  got = rlc_pdu_send_opportunity(rlc2, ms, buf, so_size)
  pdu = ffi.buffer(buf, max(got, 0))[:]
  if got != -1:
    print("      <-RLC2  : PDU %d/%d bytes: %r" % (got, so_size, pdu.decode("latin1")))
    rlc_pdu_received(rlc1, ms, buf, got)
  else:
    print("        RLC2  : PDU %d/%d bytes: %r" % (got, so_size, pdu.decode("latin1")))

  time.sleep(.250)
  
  
# Reset to get final packets, if any
rlc_reset(rlc)

# Don't bother freeing

